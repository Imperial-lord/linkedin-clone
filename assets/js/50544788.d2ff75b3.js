"use strict";(self.webpackChunklinkedin_clone_documentation=self.webpackChunklinkedin_clone_documentation||[]).push([[2343],{1761:function(e){e.exports=JSON.parse('{"blogPosts":[{"id":"chat-smart-replies","metadata":{"permalink":"/linkedin-clone/blog/chat-smart-replies","editUrl":"https://github.com/Imperial-lord/linkedin-clone/blog/2022-03-10-chat-smart-replies/index.mdx","source":"@site/blog/2022-03-10-chat-smart-replies/index.mdx","title":"Building LinkedIn Chat with Smart Replies in Flutter","description":"Wondering how the LinkedIn chat works with those nice little suggestions corresponding to your and your peers\u2019 messages? Well, wonder no more. In this article, we are going to build just that. For this tutorial, we will be using Flutter, one of the most famous cross-platform mobile app development frameworks. And there is more to that since we will be learning technologies such as Firebase, Radar, Google ML Kit, and more\u2026","date":"2022-03-10T00:00:00.000Z","formattedDate":"March 10, 2022","tags":[{"label":"programming","permalink":"/linkedin-clone/blog/tags/programming"},{"label":"development","permalink":"/linkedin-clone/blog/tags/development"},{"label":"flutter","permalink":"/linkedin-clone/blog/tags/flutter"},{"label":"linkedin","permalink":"/linkedin-clone/blog/tags/linkedin"},{"label":"ai","permalink":"/linkedin-clone/blog/tags/ai"}],"readingTime":6.2,"truncated":false,"authors":[{"name":"AB Satyaprakash","title":"Upcoming Software Engineer @ Oracle","url":"https://www.linkedin.com/in/ab-satyaprakash/","imageURL":"https://i.ibb.co/KXGgnw9/6-DD85-A2-D-7524-4-E2-F-83-E0-57416346-D35-D-1-201-a.jpg","key":"ab"}],"frontMatter":{"slug":"chat-smart-replies","title":"Building LinkedIn Chat with Smart Replies in Flutter","authors":["ab"],"tags":["programming","development","flutter","linkedin","ai"]},"nextItem":{"title":"Welcome","permalink":"/linkedin-clone/blog/welcome"}},"content":"import ReactPlayer from \'react-player\';\\nimport finalDemo from \'./final_demo.mp4\';\\n\\nWondering how the LinkedIn chat works with those nice little suggestions corresponding to your and your peers\u2019 messages? Well, wonder no more. In this article, we are going to build just that. For this tutorial, we will be using **Flutter**, one of the most famous cross-platform mobile app development frameworks. And there is more to that since we will be learning technologies such as **Firebase**, **Radar**, **Google ML Kit**, and more\u2026\\n\\n![](https://miro.medium.com/max/1400/1*JPkVxDrgjLxA25s9U70rJA.png)\\n\\n_If you love video tutorials more, I got you covered._ Watch the video below for complete implementation, and let\u2019s build this project together!\\n\\n<ReactPlayer controls url=\'https://youtu.be/6KfpMSPGUeA\' />\\n<br />\\n\\nFirebase is Google\u2019s flagship product for application development. Technically, it is a **backend as a service** ([**BaaS**](https://blog.back4app.com/backend-as-a-service-firebase/)), which means we get most of the commonly used backend functionalities out of the box, ensuring faster development cycles. We will use Firebase in our case for authenticating users \u2014 **Firebase Auth** and for its NoSQL database \u2014 **Cloud Firestore**.\\n\\n[Radar](https://radar.com) is a famous location service provider that we will be using for its reverse geocoding APIs to fetch the address from the user location.\\n\\n[Google ML Kit](https://developers.google.com/ml-kit) provides many commonly used machine learning models as APIs for mobile applications \u2014 such as **Vision APIs** (Object detection, Selfie segmentation, etc.) and **Natural Language APIs** (Translation, Writing detection, Smart Replies, etc.). We will be particularly interested in the **Smart Replies API**. Let\u2019s get started now and see how to use these.\\n\\n:::tip\\nDid you know that we can also use **Mapbox** for reverse geocoding and other functionalities? It is as good as Google Maps, only cheaper. [Here](https://medium.com/nerd-for-tech/turn-by-turn-navigation-with-mapbox-16f874567b3c) I talk about how we can use its navigation APIs to build an **Uber**\\\\-like application.\\n:::\\n\\n# Getting Started\\n\\nFor easy onboarding, I have a starter application ready for you, which you can run with just a few changes. The application has a basic LinkedIn-like UI and a layout for the Chat feature, and we have already implemented Firebase and Radar. You can find the link to the GitHub repository below.\\n\\nimport Tabs from \'@theme/Tabs\';\\nimport TabItem from \'@theme/TabItem\';\\n\\n<Tabs>\\n  <TabItem value=\'github\' label=\'GitHub\' default>\\n    \ud83d\udc19 GitHub repository link:\\n    <a href=\'https://github.com/Imperial-lord/linkedin-clone/\'> https://github.com/Imperial-lord/linkedin-clone/</a>\\n  </TabItem>\\n  <TabItem value=\'docusaurus\' label=\'Docusaurus\'>\\n    \ud83d\udcdc Docusaurus website link:\\n    <a href=\'https://imperial-lord.github.io/linkedin-clone/\'> https://imperial-lord.github.io/linkedin-clone/</a>\\n  </TabItem>\\n</Tabs>\\n\\nThe changes you will need for running the initial application can be found in this documentation website that we have built using Facebook\u2019s Open Source documentation tool \u2014 **Docusaurus**.\\n\\nOnce you have run the application, it will look like this \u2014\\n\\n![](https://miro.medium.com/max/1400/1*MnFRTHca7Ta2aI3F7CInCA.gif)_A 25 second GIF to show the how initial app looks before any changes are made_\\n\\n# Building the Chat UI\\n\\nOur chat UI will consist of 3 parts (and correspondingly 3 widgets) -\\n\\n1.  **User Info** \u2014 the name and headline of the User\\n2.  **Chat Window** \u2014 a scrollable list of messages with user details and timestamp of the messages sent\\n3.  **Chat Input** \u2014 an input field using the `CupertinoTextField`, and animated button to show additional options for adding images, GIFs, etc. Here, we will be offering the suggestions using `Chip` widgets.\\n\\n## User Info\\n\\nFor building this section, we will use the app-wide state management we have maintained using **Providers** and **MobX**. To show the user name and headline, we simply need to use `userStore.name` and `userStore.headline` inside UI widget `UserInfo()`. This is what it will look like when done.\\n\\n![](https://miro.medium.com/max/1400/1*8ZBCcE0p7DFbdRCN8ZavXw.png)\\n\\n## Chat Window\\n\\nFor building this we make use of a `StreamBuilder`, and listen to the stream:\\n\\n```\\nFirebaseFirestore.instance.collection(groupChatId).doc(groupChatId).collection().snapshots()\\n```\\n\\nOnce we fetch the data from there (while listening to changes as well), we use `ListView.builder()` to render the data in descending order of time.\\n\\n```js title=\\"chat_window.dart\\"\\nWidget buildListMessage() {\\n    return Expanded(\\n      child: groupChatId == \'\'\\n          ? const Center(child: CircularProgressIndicator())\\n          : StreamBuilder<QuerySnapshot>(\\n              stream: FirebaseFirestore.instance\\n                  .collection(\'Messages\')\\n                  .doc(groupChatId)\\n                  .collection(groupChatId)\\n                  .orderBy(\'timestamp\', descending: true)\\n                  .snapshots(),\\n              builder: (context, snapshot) {\\n                if (!snapshot.hasData) {\\n                  return const Center(child: CircularProgressIndicator());\\n                } else {\\n                  listMessage = snapshot.data!.docs;\\n                  chatStore.chatMessages = [];\\n                  for (int i = listMessage.length - 1; i >= 0; i--) {\\n                    chatStore.addChatMessages(listMessage[i].get(\'content\'),\\n                        listMessage[i].get(\'idFrom\'));\\n                  }\\n\\n                  return Padding(\\n                    padding: const EdgeInsets.only(left: 10),\\n                    child: ListView.builder(\\n                      padding: EdgeInsets.zero,\\n                      itemBuilder: (context, index) =>\\n                          buildItem(index, (snapshot.data?.docs)![index]),\\n                      itemCount: snapshot.data?.docs.length,\\n                      reverse: true,\\n                      controller: listScrollController,\\n                    ),\\n                  );\\n                }\\n              },\\n            ),\\n    );\\n  }\\n```\\n\\nWe also make use of a helper function to know when to show the name and timestamp (or headers as I will call them), **which are shown only if 2 consecutive messages are from different users.** _You can change the last part to your need, to design different UX. For instance you can go ahead and show headers whenever 2 messages differ by a specific time say 2 hours or more._\\n\\n## Chat Input\\n\\nFor building this, we use the `CupertinoTextField`, and whenever the input is submitted, we store the content to Firestore using the `onSendMessage` function inside `ChatStore`, which looks like this.\\n\\n```js title=\\"chat_window.dart\\"\\n  @action\\n  void onSendMessage(String content, String groupChatId, String id) {\\n    if (content.trim() != \'\') {\\n      var documentReference = FirebaseFirestore.instance\\n          .collection(\'Messages\')\\n          .doc(groupChatId)\\n          .collection(groupChatId)\\n          .doc(DateTime.now().millisecondsSinceEpoch.toString());\\n\\n      FirebaseFirestore.instance.runTransaction((transaction) async {\\n        transaction.set(\\n          documentReference,\\n          {\\n            \'idFrom\': id,\\n            \'idTo\': peerId,\\n            \'timestamp\': DateTime.now().millisecondsSinceEpoch.toString(),\\n            \'content\': content,\\n          },\\n        );\\n      });\\n      listScrollController.animateTo(0.0,\\n          duration: const Duration(milliseconds: 300), curve: Curves.easeOut);\\n    }\\n  }\\n```\\n\\nWe also add an animated button. With its help and using the `Visibility` widget, we create this beautiful animation to toggle viewing of extra options to add images, GIFs, etc.\\n\\nLove this article so far? Go ahead and [follow me](https://medium.com/@absatyaprakash01), and also remember to add yourself to my mailing list so that **you get an email whenever I publish**!\\n\\n# Showing Smart Replies\\n\\nNow coming to the most interesting part, we will be using this plugin \u2014 [smart_reply](https://pub.dev/packages/smart_reply) which makes use of the **Google ML Kit Natural Language APIs** to generate smart replies. The best part about this is that since these models run on device the results are much **faster** than if it were conventionally hosted on a server. This how the function to generate suggestions look like.\\n\\n```js title=\\"chat_suggestions.dart\\"\\n  void getSuggestions(messages) async {\\n    // Fetch suggestions using Google ML Kit and rebuild page\\n    List oldSuggestions = suggestions;\\n    suggestions = await const SmartReply().suggestReplies(messages);\\n    if (!listEquals(oldSuggestions, suggestions)) {\\n      setState(() {});\\n    }\\n  }\\n```\\n\\nNote that here we are rebuilding the widget, if the older suggestions are different from the newer suggestions (this way we ensure that the rebuilding is more efficient). The suggestions are generated as an array of Strings with size at max 3. We then make use of these as content for the chips, and we call the same function `onSendMessage` as before, whenever the chips are tapped to send the message. The final result looks something like this (click on the link below for the video) \u2014\\n\\n<ReactPlayer controls url={finalDemo} height=\'100%\' width=\'100%\' />\\n<br />\\n\\n:::info\\nCheck out the post I made on LinkedIn along with the video [here](https://www.linkedin.com/feed/update/urn:li:activity:6906414938382856192/)!\\n:::\\n\\n# Conclusion\\n\\nAnd just like that we have implemented a **LinkedIn** like Chat which also supports **Smart Replies**. The good part about this is we can replicate the steps in this tutorial, to any other project as well, where you might wanna use the Chat feature (and optionally the Smart replies feature). In brief, this is how the final implementation looks like \u2014\\n\\n![](https://miro.medium.com/max/1400/1*DmU9QQoZE7cyiw4Ej2YvZA.png)\\n\\nFeel free to reach out to me for any questions or suggestions that you might have. You can follow me on these social media platforms \u2014 [LinkedIn](https://www.linkedin.com/in/ab-satyaprakash/), [YouTube](https://www.youtube.com/channel/UCJ6D0HS8c9Il-eX5lGbAyGg), [Twitter](https://twitter.com/AbSatyaprakash), [Instagram](https://www.instagram.com/absatyaprakash/) for more updated content!\\n\\n**As always! Happy Hacking! \ud83d\ude07**\\n\\n[Join my email list for more awesome tutorials and programming blogs](https://absatyaprakash01.medium.com/subscribe) \u2764\ufe0f"},{"id":"welcome","metadata":{"permalink":"/linkedin-clone/blog/welcome","editUrl":"https://github.com/Imperial-lord/linkedin-clone/blog/2022-03-07-welcome/index.md","source":"@site/blog/2022-03-07-welcome/index.md","title":"Welcome","description":"This is page is still being worked on. Meanwhile, you can take a nap like those dinos. Thank you for your patience.","date":"2022-03-07T00:00:00.000Z","formattedDate":"March 7, 2022","tags":[{"label":"blog","permalink":"/linkedin-clone/blog/tags/blog"},{"label":"coming-soon","permalink":"/linkedin-clone/blog/tags/coming-soon"},{"label":"docusaurus","permalink":"/linkedin-clone/blog/tags/docusaurus"}],"readingTime":0.535,"truncated":false,"authors":[{"name":"AB Satyaprakash","title":"Upcoming Software Engineer @ Oracle","url":"https://www.linkedin.com/in/ab-satyaprakash/","imageURL":"https://i.ibb.co/KXGgnw9/6-DD85-A2-D-7524-4-E2-F-83-E0-57416346-D35-D-1-201-a.jpg","key":"ab"}],"frontMatter":{"slug":"welcome","title":"Welcome","authors":["ab"],"tags":["blog","coming-soon","docusaurus"]},"prevItem":{"title":"Building LinkedIn Chat with Smart Replies in Flutter","permalink":"/linkedin-clone/blog/chat-smart-replies"}},"content":"This is page is still being worked on. Meanwhile, **you can take a nap like those dinos**. Thank you for your patience.\\n\\n![Docusaurus Plushie](./docusaurus-plushie-banner.jpeg)\\n\\n[Docusaurus blogging features](https://docusaurus.io/docs/blog) are powered by the [blog plugin](https://docusaurus.io/docs/api/plugins/@docusaurus/plugin-content-blog).\\n\\n\x3c!-- Simply add Markdown files (or folders) to the `blog` directory.\\n\\nRegular blog authors can be added to `authors.yml`.\\n\\nThe blog post date can be extracted from filenames, such as:\\n\\n- `2019-05-30-welcome.md`\\n- `2019-05-30-welcome/index.md`\\n\\nA blog post folder can be convenient to co-locate blog post images:\\n\\n![Docusaurus Plushie](./docusaurus-plushie-banner.jpeg)\\n\\nThe blog supports tags as well!\\n\\n**And if you don\'t want a blog**: just delete this directory, and use `blog: false` in your Docusaurus config. --\x3e"}]}')}}]);