"use strict";(self.webpackChunklinkedin_clone_documentation=self.webpackChunklinkedin_clone_documentation||[]).push([[953],{3905:function(e,t,n){n.d(t,{Zo:function(){return c},kt:function(){return g}});var i=n(7294);function r(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function o(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);t&&(i=i.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,i)}return n}function a(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?o(Object(n),!0).forEach((function(t){r(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):o(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function l(e,t){if(null==e)return{};var n,i,r=function(e,t){if(null==e)return{};var n,i,r={},o=Object.keys(e);for(i=0;i<o.length;i++)n=o[i],t.indexOf(n)>=0||(r[n]=e[n]);return r}(e,t);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(i=0;i<o.length;i++)n=o[i],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(r[n]=e[n])}return r}var u=i.createContext({}),s=function(e){var t=i.useContext(u),n=t;return e&&(n="function"==typeof e?e(t):a(a({},t),e)),n},c=function(e){var t=s(e.components);return i.createElement(u.Provider,{value:t},e.children)},p={inlineCode:"code",wrapper:function(e){var t=e.children;return i.createElement(i.Fragment,{},t)}},d=i.forwardRef((function(e,t){var n=e.components,r=e.mdxType,o=e.originalType,u=e.parentName,c=l(e,["components","mdxType","originalType","parentName"]),d=s(n),g=r,h=d["".concat(u,".").concat(g)]||d[g]||p[g]||o;return n?i.createElement(h,a(a({ref:t},c),{},{components:n})):i.createElement(h,a({ref:t},c))}));function g(e,t){var n=arguments,r=t&&t.mdxType;if("string"==typeof e||r){var o=n.length,a=new Array(o);a[0]=d;var l={};for(var u in t)hasOwnProperty.call(t,u)&&(l[u]=t[u]);l.originalType=e,l.mdxType="string"==typeof e?e:r,a[1]=l;for(var s=2;s<o;s++)a[s]=n[s];return i.createElement.apply(null,a)}return i.createElement.apply(null,n)}d.displayName="MDXCreateElement"},5902:function(e,t,n){n.r(t),n.d(t,{assets:function(){return c},contentTitle:function(){return u},default:function(){return g},frontMatter:function(){return l},metadata:function(){return s},toc:function(){return p}});var i=n(7462),r=n(3366),o=(n(7294),n(3905)),a=["components"],l={sidebar_position:5},u="GitHub Login",s={unversionedId:"chat-smart-replies/setup/github-login",id:"chat-smart-replies/setup/github-login",title:"GitHub Login",description:'To allow social authentication with Google, we make use of the following plugin - githubsignin. Ensure that you have setup an OAuth App from your GitHub Developer Settings and that the "GitHub" sign-in provider is enabled on the Firebase Console with the Client ID and Secret are set, with the callback URL set in the GitHub app.',source:"@site/docs/chat-smart-replies/setup/github-login.md",sourceDirName:"chat-smart-replies/setup",slug:"/chat-smart-replies/setup/github-login",permalink:"/linkedin-clone/docs/chat-smart-replies/setup/github-login",editUrl:"https://github.com/Imperial-lord/linkedin-clone/docs/chat-smart-replies/setup/github-login.md",tags:[],version:"current",sidebarPosition:5,frontMatter:{sidebar_position:5},sidebar:"tutorialSidebar",previous:{title:"Google Login",permalink:"/linkedin-clone/docs/chat-smart-replies/setup/google-login"},next:{title:"Congratulations",permalink:"/linkedin-clone/docs/chat-smart-replies/setup/congratulations"}},c={},p=[{value:"Setup your OAuth App",id:"setup-your-oauth-app",level:2},{value:"Add details to Login Store",id:"add-details-to-login-store",level:2}],d={toc:p};function g(e){var t=e.components,l=(0,r.Z)(e,a);return(0,o.kt)("wrapper",(0,i.Z)({},d,l,{components:t,mdxType:"MDXLayout"}),(0,o.kt)("h1",{id:"github-login"},"GitHub Login"),(0,o.kt)("p",null,"To allow social authentication with Google, we make use of the following plugin - ",(0,o.kt)("a",{parentName:"p",href:"https://pub.dev/packages/github_sign_in"},(0,o.kt)("inlineCode",{parentName:"a"},"github_sign_in")),'. Ensure that you have setup an OAuth App from your GitHub Developer Settings and that the "GitHub" sign-in provider is enabled on the Firebase Console with the Client ID and Secret are set, with the callback URL set in the GitHub app.'),(0,o.kt)("h2",{id:"setup-your-oauth-app"},"Setup your OAuth App"),(0,o.kt)("p",null,"This is a very simple step. Go to your developer settings and create a new OAuth app. Add details as requested, add the callback URL and finally make a note of the ",(0,o.kt)("inlineCode",{parentName:"p"},"Client ID")," and ",(0,o.kt)("inlineCode",{parentName:"p"},"Client Secret"),"."),(0,o.kt)("p",null,(0,o.kt)("img",{loading:"lazy",alt:"GitHub",src:n(1331).Z,width:"2880",height:"910"})),(0,o.kt)("h2",{id:"add-details-to-login-store"},"Add details to Login Store"),(0,o.kt)("p",null,"For our application we are making use of ",(0,o.kt)("inlineCode",{parentName:"p"},"Providers")," for state-management. So go ahead to Login Store and inside the ",(0,o.kt)("inlineCode",{parentName:"p"},"signInWithGithub")," action add your ID, secret and callback URL."),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-dart",metastring:'title="lib/stores/login_store.dart"',title:'"lib/stores/login_store.dart"'},"@action\n  Future<void> signInWithGithub(BuildContext context) async {\n    final githubSignIn = GitHubSignIn(\n        clientId: 'clientid',\n        clientSecret: 'clientsecret',\n        redirectUrl: 'callbackurl');\n")))}g.isMDXComponent=!0},1331:function(e,t,n){t.Z=n.p+"assets/images/github-0d6d7c91a62d85bc0a7c9072202f9f88.png"}}]);